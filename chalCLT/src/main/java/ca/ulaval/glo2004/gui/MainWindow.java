/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.domain.Controleur;
import ca.ulaval.glo2004.domain.gestion_chalet.Accessoire;
import ca.ulaval.glo2004.domain.gestion_chalet.Affichable;
import ca.ulaval.glo2004.domain.gestion_chalet.Chalet;
import ca.ulaval.glo2004.domain.gestion_chalet.accessoires.Fenetre;
import ca.ulaval.glo2004.domain.gestion_chalet.accessoires.Porte;
import ca.ulaval.glo2004.domain.gestion_chalet.Mur;
import ca.ulaval.glo2004.domain.gestion_fichier.GestionnaireFichiers;
import ca.ulaval.glo2004.domain.gestion_fichier.ModificationType;
import ca.ulaval.glo2004.gui.util.ButtonGroupPersonnalise;
import ca.ulaval.glo2004.gui.util.TypeVueDetails;
import ca.ulaval.glo2004.services.CaisseOutils;
import ca.ulaval.glo2004.services.Orientations;
import ca.ulaval.glo2004.services.UniteImperiale;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Point2D;
import java.io.File;

/**
 * @author Youpi-Desktop-PC
 */
public class MainWindow extends javax.swing.JFrame {


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        fermerProjet_btn = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        sauvegarde_btn = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        exporter_btn = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        undo_btn = new javax.swing.JButton();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        redo_btn = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        vueChalet_cbBox = new javax.swing.JComboBox<>();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        aide_btn = new javax.swing.JButton();
        detailsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        fenetetreMode_btn = new javax.swing.JToggleButton();
        porteMode_btn = new javax.swing.JToggleButton();
        drawingPanelSlot = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        retraitSupplementaire_btn = new javax.swing.JButton();
        retraitSupplementaire_Textfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pourcentageZoom_label = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        modifierGrille_Textfield = new javax.swing.JTextField();
        modifierGrille_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(51, 51, 51));
        setForeground(java.awt.Color.darkGray);
        setMinimumSize(new java.awt.Dimension(1080, 610));

        jToolBar1.setRollover(true);

        fermerProjet_btn.setText("Fermer");
        fermerProjet_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fermerProjet_btn.setFocusable(false);
        fermerProjet_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fermerProjet_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        fermerProjet_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        fermerProjet_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        fermerProjet_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fermerProjet_btnActionPerformed(evt);
            }
        });
        jToolBar1.add(fermerProjet_btn);
        jToolBar1.add(filler2);

        sauvegarde_btn.setText("Sauvegarder");
        sauvegarde_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sauvegarde_btn.setFocusable(false);
        sauvegarde_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sauvegarde_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        sauvegarde_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        sauvegarde_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        sauvegarde_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegarde_btnActionPerformed(evt);
            }
        });
        jToolBar1.add(sauvegarde_btn);
        jToolBar1.add(filler3);

        exporter_btn.setText("Exporter");
        exporter_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exporter_btn.setFocusable(false);
        exporter_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exporter_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        exporter_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        exporter_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        exporter_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporter_btnActionPerformed(evt);
            }
        });
        jToolBar1.add(exporter_btn);
        jToolBar1.add(filler4);

        undo_btn.setText("Undo");
        undo_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        undo_btn.setFocusable(false);
        undo_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undo_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        undo_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        undo_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBar1.add(undo_btn);
        jToolBar1.add(filler6);

        redo_btn.setText("Redo");
        redo_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        redo_btn.setFocusable(false);
        redo_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redo_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        redo_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        redo_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBar1.add(redo_btn);
        jToolBar1.add(filler7);

        vueChalet_cbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        vueChalet_cbBox.setMaximumSize(new java.awt.Dimension(150, 30));
        vueChalet_cbBox.setMinimumSize(new java.awt.Dimension(40, 22));
        vueChalet_cbBox.setPreferredSize(new java.awt.Dimension(40, 22));
        jToolBar1.add(vueChalet_cbBox);
        jToolBar1.add(filler5);

        aide_btn.setText("Aide");
        aide_btn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        aide_btn.setFocusable(false);
        aide_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aide_btn.setMaximumSize(new java.awt.Dimension(100, 30));
        aide_btn.setMinimumSize(new java.awt.Dimension(100, 30));
        aide_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        aide_btn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(aide_btn);

        detailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        detailsPanel.setPreferredSize(new java.awt.Dimension(300, 500));
        detailsPanel.setRequestFocusEnabled(false);

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fenetetreMode_btn.setText("Fenetre");
        fenetetreMode_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fenetetreMode_btnActionPerformed(evt);
            }
        });

        porteMode_btn.setText("Porte");
        porteMode_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porteMode_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(porteMode_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(fenetetreMode_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fenetetreMode_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(porteMode_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addContainerGap())
        );

        drawingPanelSlot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout drawingPanelSlotLayout = new javax.swing.GroupLayout(drawingPanelSlot);
        drawingPanelSlot.setLayout(drawingPanelSlotLayout);
        drawingPanelSlotLayout.setHorizontalGroup(
            drawingPanelSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 851, Short.MAX_VALUE)
        );
        drawingPanelSlotLayout.setVerticalGroup(
            drawingPanelSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        retraitSupplementaire_btn.setText("Retrait Supplémentaire");
        retraitSupplementaire_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        retraitSupplementaire_btn.setMaximumSize(new java.awt.Dimension(150, 50));
        retraitSupplementaire_btn.setMinimumSize(new java.awt.Dimension(150, 50));
        retraitSupplementaire_btn.setOpaque(true);
        retraitSupplementaire_btn.setPreferredSize(new java.awt.Dimension(150, 50));
        retraitSupplementaire_btn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        retraitSupplementaire_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retraitSupplementaire_btnActionPerformed(evt);
            }
        });

        retraitSupplementaire_Textfield.setMaximumSize(new java.awt.Dimension(100, 50));
        retraitSupplementaire_Textfield.setMinimumSize(new java.awt.Dimension(100, 50));
        retraitSupplementaire_Textfield.setPreferredSize(new java.awt.Dimension(100, 50));
        retraitSupplementaire_Textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retraitSupplementaire_TextfieldActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("% zoom");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        pourcentageZoom_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pourcentageZoom_label.setText("100");
        pourcentageZoom_label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pourcentageZoom_label.setMaximumSize(new java.awt.Dimension(40, 16));
        pourcentageZoom_label.setMinimumSize(new java.awt.Dimension(40, 16));

        jCheckBox1.setText("Grille");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        modifierGrille_Textfield.setMargin(new java.awt.Insets(3, 7, 3, 7));
        modifierGrille_Textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierGrille_TextfieldActionPerformed(evt);
            }
        });

        modifierGrille_btn.setText("Modifier Grille");
        modifierGrille_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierGrille_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addGap(50, 50, 50)
                .addComponent(pourcentageZoom_label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(modifierGrille_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(modifierGrille_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(retraitSupplementaire_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(retraitSupplementaire_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(pourcentageZoom_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(retraitSupplementaire_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifierGrille_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifierGrille_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(retraitSupplementaire_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drawingPanelSlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawingPanelSlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aide_btn;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JPanel drawingPanelSlot;
    private javax.swing.JButton exporter_btn;
    private javax.swing.JToggleButton fenetetreMode_btn;
    private javax.swing.JButton fermerProjet_btn;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField modifierGrille_Textfield;
    private javax.swing.JButton modifierGrille_btn;
    private javax.swing.JToggleButton porteMode_btn;
    protected javax.swing.JLabel pourcentageZoom_label;
    private javax.swing.JButton redo_btn;
    private javax.swing.JTextField retraitSupplementaire_Textfield;
    private javax.swing.JButton retraitSupplementaire_btn;
    private javax.swing.JButton sauvegarde_btn;
    private javax.swing.JButton undo_btn;
    private javax.swing.JComboBox<String> vueChalet_cbBox;
    // End of variables declaration//GEN-END:variables
    private PorteDetailsPanel porteDetailsPanel;
    private FenetreDetailsPanel fenetreDetailsPanel;
    private MurDetailsPanel murDetailsPanel;
    private VideDetailsPanel videDetailsPanel;
    private final Controleur controleur;
    private final DrawingPanel drawingPanel;
    private Orientations vueMode;
    private ButtonGroupPersonnalise accesspoireCreationMode;
    private STLExportationPanel stlExportationPanel;
    private String cheminFichierActuel;
    

    public boolean isFenete_btn() {
        return fenetetreMode_btn.isSelected();
    }

    public boolean isPorte_btn() {
       return porteMode_btn.isSelected();
    }
    

    private GestionnaireFichiers gestionnaireFichiers;
    public void setAfficherVoisins(boolean afficherVoisins) {
        this.afficherVoisins = afficherVoisins;
        drawingPanel.setCheckBoxVoisin(afficherVoisins);
        drawingPanel.quickUpdate();
    }

    private boolean afficherVoisins = true;

    public MainWindow(Controleur p_controleur) {
        iniView();
        controleur = p_controleur;
        drawingPanel = new DrawingPanel(this, drawingPanelSlot.getSize());
        videDetailsPanel = new VideDetailsPanel(this, controleur);
        porteDetailsPanel = new PorteDetailsPanel(this, controleur);
        fenetreDetailsPanel = new FenetreDetailsPanel(this, controleur);
        murDetailsPanel = new MurDetailsPanel(this, controleur);
        stlExportationPanel = new STLExportationPanel(this, controleur);
        accesspoireCreationMode = new ButtonGroupPersonnalise();
        preparerDifferentesZones();
        preparerTextFields();
        gestionnaireFichiers = new GestionnaireFichiers();

        // Add undo and redo button listeners
        undo_btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controleur.undo();
                refresh();
            }
        });

        redo_btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controleur.redo();
                refresh();
            }
        });
    }

    private void preparerTextFields() {
        DocumentListener textFieldListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateButtonState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateButtonState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateButtonState();
            }

        };
        retraitSupplementaire_Textfield.getDocument().addDocumentListener(textFieldListener);
        modifierGrille_Textfield.getDocument().addDocumentListener(textFieldListener);
    }

    private void updateButtonState() {
        // Récupérez les valeurs de longueur et de largeur à partir des champs de texte
        String retraitSupplementaireText = retraitSupplementaire_Textfield.getText();
        String modifierGrilleText = modifierGrille_Textfield.getText();

        // S'assure de valider et de convertir ces valeurs en types numériques ( pour livrable 3)
        if (retraitSupplementaireText != null) {
            boolean estVide = retraitSupplementaireText.isEmpty();
            boolean match = retraitSupplementaireText.matches(UniteImperiale.FORMAT_UNITE_IMPERIAL.pattern());
            boolean doesNotEndWithBackSlash = !retraitSupplementaireText.endsWith("/");

            if (!estVide && match && doesNotEndWithBackSlash) {
                UniteImperiale retraitSupplementaireValeur = new UniteImperiale(retraitSupplementaireText);

                if (retraitSupplementaireValeur.estValide()) {
                    // Active le boutton "Créer la porte" si les deux sont valides
                    retraitSupplementaire_btn.setEnabled(true);
                }
            } else {
                retraitSupplementaire_btn.setEnabled(false);
            }
        }

        if (modifierGrilleText != null) {
            boolean estVide = modifierGrilleText.isEmpty();
            boolean match = modifierGrilleText.matches(UniteImperiale.FORMAT_UNITE_IMPERIAL.pattern());
            boolean doesNotEndWithBackSlash = !modifierGrilleText.endsWith("/");

            if (!estVide && match && doesNotEndWithBackSlash) {
                UniteImperiale modifierGrilleValeur = new UniteImperiale(modifierGrilleText);

                if (modifierGrilleValeur.estValide()) {
                    // Active le boutton "Créer la porte" si les deux sont valides
                    modifierGrille_btn.setEnabled(true);
                }
            } else {
                modifierGrille_btn.setEnabled(false);
            }
        }
    }

    private void preparerDifferentesZones() {
        retraitSupplementaire_btn.setEnabled(false);
        modifierGrille_btn.setEnabled(false);
        /* Zone d'affichage du chalet*/
        drawingPanelSlot.add(drawingPanel);
        // permet de redimensionner le drawing panel quand la fenetre change de dimensions
        drawingPanelSlot.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                SwingUtilities.invokeLater(() -> {
                    resizeDrawingPanel();
                });
            }
        });


        /* Zone des details*/
        // Utilisez une CardLayout pour basculer entre les panneaux de détails
        detailsPanel.setLayout(new CardLayout());
        detailsPanel.add(videDetailsPanel, TypeVueDetails.VIDE.type);
        detailsPanel.add(porteDetailsPanel, TypeVueDetails.PORTE.type);
        detailsPanel.add(fenetreDetailsPanel, TypeVueDetails.FENETRE.type);
        detailsPanel.add(murDetailsPanel, TypeVueDetails.MUR.type);
        detailsPanel.add(stlExportationPanel, TypeVueDetails.STL.type);

        /*Selection du mode de creation d'accessoires */
        accesspoireCreationMode.add(fenetetreMode_btn);
        accesspoireCreationMode.add(porteMode_btn);
        ItemListener itemListener = new ItemListener() {
            public void itemStateChanged(ItemEvent ev) {

                CardLayout cardLayout = (CardLayout) detailsPanel.getLayout();

                viderToutLesVueDetails();


                if (getvueMode() != Orientations.DESSUS) {
                    if (ev.getStateChange() == ItemEvent.SELECTED) {
                        if (fenetetreMode_btn.isSelected()) {
                          
                            controleur.deselectionnerToutSauf();
                            fenetreDetailsPanel.creationMode(true);
                            setvueMode(getvueMode());
                            cardLayout.show(detailsPanel, TypeVueDetails.FENETRE.type);
                        }
                        if (porteMode_btn.isSelected()) {
                            
                            controleur.deselectionnerToutSauf();
                            porteDetailsPanel.creationMode(true);
                            setvueMode(getvueMode());
                            cardLayout.show(detailsPanel, TypeVueDetails.PORTE.type);
                        }

                    } else if (ev.getStateChange() == ItemEvent.DESELECTED) {

                        if (ev.getSource() == porteMode_btn)
                            porteDetailsPanel.creationMode(false);
                        else if (ev.getSource() == fenetetreMode_btn)
                            fenetreDetailsPanel.creationMode(false);

                        setvueMode(getvueMode());
                        cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                    }
                } else
                    ((JToggleButton) ev.getSource()).setSelected(false);
            }
        };
        porteMode_btn.addItemListener(itemListener);
        fenetetreMode_btn.addItemListener(itemListener);
        exporter_btn.addItemListener(itemListener);

        /*Changement de vue */
        vueChalet_cbBox.setModel(new javax.swing.DefaultComboBoxModel<>(Orientations.getListeOrientationsString()));
        vueChalet_cbBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refresh();
            }
        });
        vueChalet_cbBox.addActionListener(e -> {
            CardLayout cardLayout = (CardLayout) detailsPanel.getLayout();
            porteMode_btn.setSelected(false);
            fenetetreMode_btn.setSelected(false);


            if (vueChalet_cbBox.getSelectedItem() == Orientations.FACADE.orientation) {
                controleur.deselectionnerToutSauf();
                viderToutLesVueDetails();
                cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                setvueMode(Orientations.FACADE);
            } else if (vueChalet_cbBox.getSelectedItem() == Orientations.ARRIERE.orientation) {
                controleur.deselectionnerToutSauf();
                viderToutLesVueDetails();
                cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                setvueMode(Orientations.ARRIERE);
            } else if (vueChalet_cbBox.getSelectedItem() == Orientations.GAUCHE.orientation) {
                controleur.deselectionnerToutSauf();
                viderToutLesVueDetails();
                cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                setvueMode(Orientations.GAUCHE);
            } else if (vueChalet_cbBox.getSelectedItem() == Orientations.DROITE.orientation) {
                controleur.deselectionnerToutSauf();
                viderToutLesVueDetails();
                cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                setvueMode(Orientations.DROITE);
            } else if (vueChalet_cbBox.getSelectedItem() == Orientations.DESSUS.orientation) {
                controleur.deselectionnerToutSauf();
                viderToutLesVueDetails();
                cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
                setvueMode(Orientations.DESSUS);
            }
        });
        this.vueMode = Orientations.DESSUS;
        vueChalet_cbBox.setSelectedItem(vueMode.orientation);
        setvueMode(vueMode);
    }

    private void iniView() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setResizable(true);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }


    /**
     * redimensionne le drawing panel puis rafraichit son contenu pour qu'il soit également ajusté
     */
    private void resizeDrawingPanel() {
        drawingPanel.setSize(drawingPanelSlot.getSize());
        setvueMode(vueMode);
    }

    protected void refresh() {
        if (drawingPanel.getGraphicsZoomPrecedent() != null)
            drawingPanel.quickUpdate();
    }

    protected Dimension getDrawingPanelSize() {
        return drawingPanel.getSize();
    }

    public Affichable selectionnerComposanteChalet(Point2D p_clickedPointInInches, Orientations p_vueMode) {
        Affichable composanteSelectonne = controleur.selectionnerComposanteChalet(p_clickedPointInInches, p_vueMode);

        viderToutLesVueDetails();
        porteMode_btn.setSelected(false);
        fenetetreMode_btn.setSelected(false);

        CardLayout cardLayout = (CardLayout) detailsPanel.getLayout();

        // si une composante a ete selectionnee, on l'affiche
        if (composanteSelectonne != null) {
            if (composanteSelectonne instanceof Mur) {
                // affiche les details mur
                murDetailsPanel.remplirAffichageDetails((Mur) composanteSelectonne);
                cardLayout.show(detailsPanel, TypeVueDetails.MUR.type);
            } else if (composanteSelectonne instanceof Fenetre) {
                // affiche les details fenetre
                fenetreDetailsPanel.remplirAffichageDetails((Fenetre) composanteSelectonne);
                cardLayout.show(detailsPanel, TypeVueDetails.FENETRE.type);
            } else if (composanteSelectonne instanceof Porte) {
                // les details porte
                porteDetailsPanel.remplirAffichageDetails((Porte) composanteSelectonne);
                cardLayout.show(detailsPanel, TypeVueDetails.PORTE.type);
            }
        } else
            cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);

        return composanteSelectonne;
    }

    protected void updateAccessoireInfoAfterMove(Accessoire p_accessoire) {
        if (p_accessoire instanceof Fenetre)
            fenetreDetailsPanel.remplirAffichageDetails((Fenetre) p_accessoire);
        else if (p_accessoire instanceof Porte)
            porteDetailsPanel.remplirAffichageDetails((Porte) p_accessoire);
    }

    public Affichable survolMur(Point2D p_hoveredPointInInches, Orientations p_vueMode) {
        return controleur.survolMur(p_hoveredPointInInches, p_vueMode);
    }

    protected void detailsPanelVide() {
        CardLayout cardLayout = (CardLayout) detailsPanel.getLayout();
        cardLayout.show(detailsPanel, TypeVueDetails.VIDE.type);
    }

    private void viderToutLesVueDetails() {
        // vide toute les Textfield de tout les vues de details
        fenetreDetailsPanel.viderToutVueDetails();
        porteDetailsPanel.viderToutVueDetails();
        murDetailsPanel.viderToutVueDetails();
    }

    /**
     * rafraichit la position des composante du chalet par rapport au drawing panel
     */
    protected void updateChaletComposantePosition() {
        //TODO le RATIO_TEST va etre remplacer dans le futur
        controleur.updateContourPosition(drawingPanel.getSize(), CaisseOutils.RATIO_TEST);
    }

    /**
     * rafraichit le contenu du drawing Panel pour qu'il soit bien ajusté à ses dimensions en considérant la vue courante
     *
     * @param newMode
     */
    public void setvueMode(Orientations newMode) {
        this.vueMode = newMode;
        videDetailsPanel.remplirAffichageDetails();
        controleur.setVueChalet(vueMode);
        drawingPanel.paint(drawingPanel.getGraphicsZoomPrecedent() != null ? drawingPanel.getGraphicsZoomPrecedent() : drawingPanel.getGraphics());
        if (drawingPanel.getGraphicsZoomPrecedent() != null)
            drawingPanel.quickUpdate();
    }

    private void fermerProjet_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fermerProjet_btnActionPerformed
        HomePanel homePanel = new HomePanel();
        homePanel.pack();
        homePanel.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_fermerProjet_btnActionPerformed

    private void exporter_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporter_btnActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) detailsPanel.getLayout();
        controleur.deselectionnerToutSauf();
        porteMode_btn.setSelected(false);
        fenetetreMode_btn.setSelected(false);
        cardLayout.show(detailsPanel, TypeVueDetails.STL.type);
    }//GEN-LAST:event_exporter_btnActionPerformed

    private void retraitSupplementaire_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retraitSupplementaire_btnActionPerformed
        String retraitSupplementaireText = retraitSupplementaire_Textfield.getText();
        controleur.changerRetraitSupplementaire(new UniteImperiale(retraitSupplementaireText));
        remplirAffichageDetails();
        refresh();
        setvueMode(getvueMode());
    }//GEN-LAST:event_retraitSupplementaire_btnActionPerformed

    private void porteMode_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porteMode_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porteMode_btnActionPerformed

    private void retraitSupplementaire_TextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retraitSupplementaire_TextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_retraitSupplementaire_TextfieldActionPerformed

    private void modifierGrille_TextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierGrille_TextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifierGrille_TextfieldActionPerformed

    private void modifierGrille_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierGrille_btnActionPerformed
        // TODO add your handling code here:
        String modifierGrille_Text = modifierGrille_Textfield.getText();
        drawingPanel.setLongueurGrille(new UniteImperiale(modifierGrille_Text).pouces());
        drawingPanel.quickUpdate();

    }//GEN-LAST:event_modifierGrille_btnActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        drawingPanel.setCheckBoxGrille(evt.getStateChange() == ItemEvent.SELECTED);
        drawingPanel.quickUpdate();
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void fenetetreMode_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fenetetreMode_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fenetetreMode_btnActionPerformed

    private void sauvegarde_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegarde_btnActionPerformed
        if (cheminFichierActuel !=null && !cheminFichierActuel.isEmpty()){
            this.controleur.sauvegarder(cheminFichierActuel.endsWith(".ser") ? cheminFichierActuel : cheminFichierActuel + ".ser");
        }
        else {
            JFileChooser fileChooser = new JFileChooser();
            int choix = fileChooser.showSaveDialog(null);

            if (choix == JFileChooser.APPROVE_OPTION) {
                File fichierChoisi = fileChooser.getSelectedFile();
                String cheminFichier = fichierChoisi.getAbsolutePath();

                this.controleur.sauvegarder(cheminFichier.endsWith(".ser") ? cheminFichier : cheminFichier + ".ser");
                setCheminFichierActuel(cheminFichier);
            }
        }
    }//GEN-LAST:event_sauvegarde_btnActionPerformed

    protected void viderToutVueDetails() {
        retraitSupplementaire_Textfield.setText("");
    }

    protected void remplirAffichageDetails() {
        retraitSupplementaire_Textfield.setText(Chalet.getRetraitSupplementaire() + "");
    }

    public Orientations getvueMode() {
        return vueMode;
    }

    Controleur getControleur() {
        return controleur;
    }
    protected void setCheminFichierActuel(String cheminFichierActuel) {
        this.cheminFichierActuel = cheminFichierActuel;
    }

    protected void stopCreationMode(){
        porteMode_btn.setSelected(false);
        fenetetreMode_btn.setSelected(false);
    }

}
