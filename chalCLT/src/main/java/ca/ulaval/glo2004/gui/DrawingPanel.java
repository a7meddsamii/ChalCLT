/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.domain.gestion_afficheurs.AfficheurDessus;
import ca.ulaval.glo2004.domain.gestion_afficheurs.AfficheurMur;
import ca.ulaval.glo2004.domain.gestion_chalet.Accessoire;
import ca.ulaval.glo2004.domain.gestion_chalet.Affichable;
import ca.ulaval.glo2004.domain.gestion_chalet.Mur;
import static ca.ulaval.glo2004.domain.gestion_chalet.Panneau.DIMENSION_PANNEAU_PORTE;
import static ca.ulaval.glo2004.domain.gestion_chalet.Panneau.DIMENSION_PANNEAU_PORTEL;
import ca.ulaval.glo2004.domain.gestion_chalet.PanneauToit;
import ca.ulaval.glo2004.domain.gestion_chalet.toit.Pignon;
import ca.ulaval.glo2004.services.CaisseOutils;
import ca.ulaval.glo2004.services.Orientations;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Hashtable;

import static ca.ulaval.glo2004.domain.gestion_chalet.Panneau.DIMENSION_PANNEAU_DEFAUT;
import static ca.ulaval.glo2004.domain.gestion_chalet.Panneau.DIMENSION_PANNEAU_FENETRE;

/**
 * @author Youpi-Desktop-PC
 */
public class DrawingPanel extends javax.swing.JPanel {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                addMouseWheelListener(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addMouseWheelListener(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_addMouseWheelListener
        zoomInOut = true;
        //Zoom in
        if (evt.getWheelRotation() < 0) {
            facteurZoomCourant += 0.05d;
            repaint();
            mainWindow.pourcentageZoom_label.setText(Math.round(facteurZoomCourant * 100) + "");
        }
        //Zoom out
        if (evt.getWheelRotation() > 0 && facteurZoomCourant > 0.05) {
            facteurZoomCourant -= 0.05d;
            repaint();
            mainWindow.pourcentageZoom_label.setText(Math.round(facteurZoomCourant * 100) + "");
        }
    }//GEN-LAST:event_addMouseWheelListener

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private MainWindow mainWindow;
    private AfficheurMur afficheurMur;

    private AfficheurDessus afficheurDessus;
    private boolean checkBoxGrille;

    protected void setCheckBoxVoisin(boolean checkBoxVoisin) {
        this.checkBoxVoisin = checkBoxVoisin;
    }

    private boolean checkBoxVoisin;
    private float longueurGrille = 3;

    protected double facteurZoomCourant = 1;
    private double facteurZoomPrecedent = 1;
    private boolean zoomInOut;
    private double xOffset = 0;
    private double yOffset = 0;
    private static final int GRID_BORDER = 25000;
    private Graphics2D graphicsZoomPrecedent;
    private Affichable selectedAccessory;
    private Rectangle2D.Double selectedAccessoryShape;
    private Point2D initialClickPoint;

    /**
     * @param p_mainWindow
     */
    public DrawingPanel(MainWindow p_mainWindow, Dimension p_dimension) {
        initComponents();
        mainWindow = p_mainWindow;
        afficheurMur = new AfficheurMur();
        afficheurDessus = new AfficheurDessus();
        checkBoxVoisin = true;
        setSize(p_dimension);
        setBackground(Color.white);
        setBorder(BorderFactory.createLineBorder(Color.blue, 3));
        prepareDrawingPanel();
    }

    public void setLongueurGrille(float longueurGrille) {
        this.longueurGrille = longueurGrille;
    }

    protected void setCheckBoxGrille(boolean checkBoxGrille) {
        this.checkBoxGrille = checkBoxGrille;
    }

    private void prepareDrawingPanel() {

        addMouseListener(new MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent e) {
                Point2D point2D = e.getPoint();
                point2D.setLocation((point2D.getX() - xOffset) / facteurZoomCourant, (point2D.getY() - yOffset) / facteurZoomCourant);

                if (!(mainWindow.isFenete_btn() || mainWindow.isPorte_btn())) {

                    selectedAccessory = mainWindow.selectionnerComposanteChalet(point2D, mainWindow.getvueMode());

                    if (selectedAccessory instanceof Accessoire) {
                        initialClickPoint = point2D;
                        selectedAccessoryShape = new Rectangle2D.Double(
                                selectedAccessory.getShape().getBounds2D().getX(),
                                selectedAccessory.getShape().getBounds2D().getY(),
                                selectedAccessory.getShape().getBounds2D().getWidth(),
                                selectedAccessory.getShape().getBounds2D().getHeight());
                    } else {
                        selectedAccessory = null;
                        selectedAccessoryShape = null;
                    }
                }
                quickUpdate();
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Point2D point2D = evt.getPoint();
                point2D.setLocation((point2D.getX() - xOffset) / facteurZoomCourant, (point2D.getY() - yOffset) / facteurZoomCourant);

                if (selectedAccessory != null && afficheurMur.getDeplacementAccessoire() != null) {
                    mainWindow.getControleur().updateCoordonnees((Accessoire) selectedAccessory, afficheurMur.getDeplacementAccessoire(), CaisseOutils.RATIO_TEST);
                    mainWindow.updateAccessoireInfoAfterMove((Accessoire) selectedAccessory);
                }

                Affichable panneauSurvole = mainWindow.survolMur(point2D, mainWindow.getvueMode());
                if (panneauSurvole instanceof Mur && afficheurMur.getDeplacementAccessoire() != null) {

                    if (mainWindow.isFenete_btn()) {
                        Orientations orientation = mainWindow.getvueMode();
                        mainWindow.getControleur().creationFenetre(DIMENSION_PANNEAU_FENETRE, DIMENSION_PANNEAU_FENETRE, afficheurMur.getDeplacementAccessoire(), orientation);
                        quickUpdate();
                    } else if (mainWindow.isPorte_btn()) {
                        Orientations orientation = mainWindow.getvueMode();
                        mainWindow.getControleur().creationPorte(DIMENSION_PANNEAU_PORTE, DIMENSION_PANNEAU_PORTEL, afficheurMur.getDeplacementAccessoire()[0], orientation);
                        quickUpdate();
                    }

                } else
                    mainWindow.stopCreationMode();

                selectedAccessory = null;
                selectedAccessoryShape = null;
                initialClickPoint = null;
                afficheurMur.stopMovingAccessory();
                quickUpdate();
                mainWindow.getControleur().deselectionnerToutSauf();
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                Point2D point2D = e.getPoint();
                point2D.setLocation((point2D.getX() - xOffset) / facteurZoomCourant, (point2D.getY() - yOffset) / facteurZoomCourant);

                if (!(mainWindow.isFenete_btn() || mainWindow.isPorte_btn()))
                    mainWindow.selectionnerComposanteChalet(point2D, mainWindow.getvueMode());

                mainWindow.setvueMode(mainWindow.getvueMode());
            }
        });

        addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (selectedAccessory instanceof Accessoire) {
                    Point2D point2D = e.getPoint();
                    point2D.setLocation((point2D.getX() - xOffset) / facteurZoomCourant, (point2D.getY() - yOffset) / facteurZoomCourant);

                    double deltaX = point2D.getX() - initialClickPoint.getX();
                    double deltaY = point2D.getY() - initialClickPoint.getY();

                    double newX = selectedAccessoryShape.getX() + deltaX;
                    double newY = selectedAccessoryShape.getY() + deltaY;

                    selectedAccessoryShape.setRect(newX, newY, selectedAccessoryShape.getWidth(), selectedAccessoryShape.getHeight());
                    afficheurMur.drawShape(selectedAccessoryShape);

                    initialClickPoint = point2D;
                    quickUpdate();
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                //Code à exécuter lorsque la souris entre dans le composant
                Point2D point2D = e.getPoint();
                point2D.setLocation((point2D.getX() - xOffset) / facteurZoomCourant, (point2D.getY() - yOffset) / facteurZoomCourant);

                Affichable panneauSurvole = mainWindow.survolMur(point2D, mainWindow.getvueMode());
                if (panneauSurvole instanceof Mur) {
                    String textPanneau = "<html><strong> Mur: </strong>" + ((Mur) panneauSurvole).getCote().orientation + "<html> <br>"
                            + "<html><strong> Longueur: </strong>" + ((Mur) panneauSurvole).getLongueur() + "<html> <br>"
                            + "<html><strong> Largeur: </strong>" + ((Mur) panneauSurvole).getLargeur() + "<html> <br>"
                            + "<html><strong> Épaisseur: </strong>" + ((Mur) panneauSurvole).getEpaisseur() + "<html> <br>"
                            + "<html><strong> Espacement des accessoires: </strong>" + ((Mur) panneauSurvole).getEspacementAccessoires() + "<html> <br>"
                            + "<html><strong> Nombre d'accessoires: </strong>" + ((Mur) panneauSurvole).getNbrAccessoire();
                    setToolTipText(textPanneau);

                    if (mainWindow.isFenete_btn() || mainWindow.isPorte_btn()) {
                        if (selectedAccessoryShape == null)
                            selectedAccessoryShape = new Rectangle2D.Double(point2D.getX(), point2D.getY(), DIMENSION_PANNEAU_FENETRE.pieds() * CaisseOutils.RATIO_TEST, mainWindow.isFenete_btn() ? DIMENSION_PANNEAU_FENETRE.pieds() * CaisseOutils.RATIO_TEST : DIMENSION_PANNEAU_PORTE.pieds() * CaisseOutils.RATIO_TEST);
                        else
                            selectedAccessoryShape.setRect(point2D.getX(), point2D.getY(), DIMENSION_PANNEAU_DEFAUT.pieds() * CaisseOutils.RATIO_TEST, mainWindow.isFenete_btn() ? DIMENSION_PANNEAU_FENETRE.pieds() * CaisseOutils.RATIO_TEST : DIMENSION_PANNEAU_PORTE.pieds() * CaisseOutils.RATIO_TEST);
                        Color color = mainWindow.isFenete_btn() ? Affichable.COULEUR_NON_SELECTIONNEE_FENETRE : Affichable.COULEUR_NON_SELECTIONNEE_PORTE;
                        afficheurMur.drawHoverShape(selectedAccessoryShape, mainWindow.getvueMode(), color);
                        quickUpdate();
                    }

                } else if (panneauSurvole instanceof PanneauToit && checkBoxVoisin) {
                    String textPanneau = "<html><strong> Panneau: </strong>" + panneauSurvole.getClass().getSimpleName() + " " + ((panneauSurvole instanceof Pignon) ? ((PanneauToit) panneauSurvole).getCote().orientation : "")  + "<html> <br>"
                            + "<html><strong> Angle: </strong>" + ((PanneauToit) panneauSurvole).getAngle() + '\u00B0' + "<html> <br>"
                            + "<html><strong> Longueur: </strong>" + ((PanneauToit) panneauSurvole).getLongueur() + "<html> <br>"
                            + "<html><strong> Largeur: </strong>" + ((PanneauToit) panneauSurvole).getHauteur() + "<html> <br>"
                            + "<html><strong> Épaisseur: </strong>" + ((PanneauToit) panneauSurvole).getEpaisseur() + "<html> <br>";
                    setToolTipText(textPanneau);
                }else if (getToolTipText() != null && !getToolTipText().isEmpty()) {
                    setToolTipText(null);
                    quickUpdate();
                }
            }
        });
    }

    protected void quickUpdate() {

        Point where = new Point(getWidth() / 2, getHeight() / 2);
        MouseWheelEvent event = new MouseWheelEvent(this, MouseEvent.MOUSE_WHEEL, System.currentTimeMillis(), 0, where.x, where.y, 0, false, 0, MouseWheelEvent.WHEEL_UNIT_SCROLL, 1);
        dispatchEvent(event);
        MouseWheelEvent event2 = new MouseWheelEvent(this, MouseEvent.MOUSE_WHEEL, System.currentTimeMillis(), 0, where.x, where.y, 0, false, 0, MouseWheelEvent.WHEEL_UNIT_SCROLL, -1);
        dispatchEvent(event2);
    }

    protected Graphics2D getGraphicsZoomPrecedent() {
        return graphicsZoomPrecedent;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = effectueZoom(g);
        paintComponents(g2);
    }

    @Override
    public void paintComponents(Graphics g) {
        super.paintComponents(g);
        placeHolderDrawing(g);
        if (checkBoxGrille)
            dessinerGrille(g);
    }

    /**
     * this method is used to help recognize whether or not the drawing panel is
     * visible TODO delete this method later.
     */
    private void placeHolderDrawing(Graphics g) {
        mainWindow.updateChaletComposantePosition();
        if (mainWindow.getvueMode() != Orientations.DESSUS) {
            Hashtable<String, CaisseOutils.Tuple<Shape, Shape>> p_tableau = afficheurMur.dessinerMur(g, mainWindow.getControleur().getComposantes(), mainWindow.getControleur().getToit(), checkBoxVoisin);
            mainWindow.getControleur().updateShapeDebordement(p_tableau);
        } else {
            // afficheurDessus.dessinerMurs(g, mainWindow.getControleur().getComposantes());
            Hashtable<Orientations, Shape> p_tableau = afficheurDessus.dessinerMurs(g, mainWindow.getControleur().getComposantes(), mainWindow.getControleur().getMur(Orientations.ARRIERE), mainWindow.getControleur().getMur(Orientations.GAUCHE));
            mainWindow.getControleur().updateShapeVueDessus(p_tableau);
        }
    }

    protected Graphics2D effectueZoom(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        if (zoomInOut) {
            AffineTransform at = new AffineTransform();
            double rapportZoom = facteurZoomCourant / facteurZoomPrecedent;
            double xRelative = MouseInfo.getPointerInfo().getLocation().getX() - getLocationOnScreen().getX();
            double yRelative = MouseInfo.getPointerInfo().getLocation().getY() - getLocationOnScreen().getY();

            xOffset = (rapportZoom) * (xOffset) + (1 - rapportZoom) * xRelative;
            yOffset = (rapportZoom) * (yOffset) + (1 - rapportZoom) * yRelative;

            at.translate(xOffset, yOffset);
            at.scale(facteurZoomCourant, facteurZoomCourant);
            facteurZoomPrecedent = facteurZoomCourant;
            zoomInOut = false;
            g2.transform(at);
            graphicsZoomPrecedent = (Graphics2D) g2.create();
        }
        return g2;
    }

    protected void dessinerGrille(Graphics g) {
        for (float i = -GRID_BORDER; i < GRID_BORDER; i += (longueurGrille / 12) * CaisseOutils.RATIO_TEST) {
            Line2D.Float line2D = new Line2D.Float(-GRID_BORDER, i, GRID_BORDER, i);
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            g2.draw(line2D);
        }
        for (float i = -GRID_BORDER; i < GRID_BORDER; i += (longueurGrille / 12) * CaisseOutils.RATIO_TEST) {
            Line2D.Float line2D = new Line2D.Float(i, -GRID_BORDER, i, GRID_BORDER);
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            g2.draw(line2D);
        }
    }
}
